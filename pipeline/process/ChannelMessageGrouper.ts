import { PMessage } from "@pipeline/parse/Types";
import { PMessageGroup } from "@pipeline/process/Types";

/**
 * Responsible for receiving PMessage objects from the parser and
 * generate groups of messages (PMessageGroup) to be processed by the Processor.
 *
 * We want to process messages in groups because it makes more accurate some analysis.
 *
 * The group of messages generated by this class are sent by the same author, in chronological order.
 * Since this class assumes messages received are from the same channel,
 * the groups produced will contain messages from the same channel.
 * This class has to deal with out-of-order and duplicated messages.
 * It also assumes that a rogue message will not appear in some time range already covered.
 */
export class ChannelMessageGrouper {
    // NOTE: PMessage[] and PMessageGroup although are the same type, they are different concepts
    // one has nothing special and the other has guarantees

    // NOTE: nothing of this is implemented yet
    // we are just passing messages as is

    messages: PMessage[] = [];

    pushMessages(incomingMessages: PMessage[]) {
        this.messages.push(...incomingMessages);
    }

    *extractGroups(): Generator<PMessageGroup> {
        for (const message of this.messages) yield [message];
        this.messages = [];
    }
}
